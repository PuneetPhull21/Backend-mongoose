#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backendwithmongo:server');
var http = require('http');
const jwt = require('jsonwebtoken');
const { options } = require('../routes');
const mongoose = require('mongoose');
const Message  = mongoose.model('message');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let roomid = '';
options2={
  cors:true,
  origins:["http://localhost:4000"],
 }
var server = http.createServer(app);
const io = require('socket.io')(server,options2);

io.use(async(socket,next)=>{
 const token = socket.handshake.query.token;
   const payload = jwt.verify(token,"SECRETKEY007");
            socket.userId = payload.id;            
next()})

 io.on('connection',(socket)=>{
  
    socket.on('JOIN_ROOM',(room)=>{
      roomid = room;
      socket.join(room);
    })
    socket.on('NEW_MESSAGE',(msg)=>{
      io.to(roomid).emit("NEW_MESSAGE",msg);
      const details = new Message ({
        chatroom:msg.id,
        user:msg.username,
        msg:msg.message,
      }) 
      details.save();
      console.log("details is add") ;           
        }) 


      socket.on("ALL_CHAT",async (msg)=>{
       const chat  = await Message.find({chatroom:msg.id}).limit(10);
       io.emit("ALL_CHAT",chat);
         return chat  
           
      })

      
    
  
 
 socket.on('disconnect',()=>{
   io.to(roomid).emit("user Disconnected",+socket.userId);
    console.log('disconnected' +socket.userId);
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
